Q1. Consider the difference between tools which have a graphical user interface and a small but combinable command-line utilities used at shell prompts. 
	A. Which set is more orthogonal, and why?
	The CLI is more orthogonal. The GUI tool depends on the CLI backend, so if something is to change on the CLI backend then the GUI needs to be updated too.
	
	B. Which is easier to use for exactly the purpose for which it was intended? 
	Again, probably the CLI. GUIs tend to make things flashier and add more functionality to it to attract more users. CLI has a set list of options/flags to be passed in with the command to be executed
	
	C. Which set is easier to combine with other tools to meet new challenges? 
	CLI. The result can be piped out to another command like grep for example

	D. Which set is easier to learn?
	Probably the CLI as with every tool you never really use 100% of the tool so only need to learn a base set of commands and these can be aliased. If you are knew to the CLI, then it can be intimidating and the GUI would be the safe option


Q2. C++ supports multiple inheritence and Java allows a class to implement multiple interfaces. Ruby has mixins. 
	A. What impact does using these facilities have on orthogonality?
	Don't know on C++ and Ruby but Java allowing multiple inheritence is basically a contract for a class. If a class implements multiple interfaces them it must use all of the methods. But there will only ever be 1 instance of that class and should only be one effect when a method is invoked	
	
	B. Is there a difference in impact between using multiple inheritance and multiple interfaces?
	I think so yes as multiple inheritence means using all of the base classes implementation while multiple interfaces is just defining the methods and what should be done is then upto the base class.

	C. Is there a difference between using delegation and using inheritance?
	Yes delegation is an alternative to inheritance. Inheritance is an IS-A relationship while delegation is a HAS-A relationship. For example a Car is a Vehicle so inheritence would make sense there while a Car has a Engine. Delegation would make sense here and not inheritance
